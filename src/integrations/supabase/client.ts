// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js'
import type { Database } from './types'

const SUPABASE_URL = 'https://cmdnaaclpkgxxportnuc.supabase.co'
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNtZG5hYWNscGtneHhwb3J0bnVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM3NzQyNzcsImV4cCI6MjA2OTM1MDI3N30.hFh9dR4oo-ZG_LKaLMYyBK-qQKreEBTJqFBxFLqKRig'

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
})

// Helper function to handle Supabase errors
export const handleSupabaseError = (error: any) => {
  console.error('Supabase error:', error)
  
  if (error?.message) {
    return error.message
  }
  
  if (error?.details) {
    return error.details
  }
  
  return 'An unexpected error occurred'
}

// Helper function to format Pakistani phone numbers
export const formatPakistaniPhone = (phone: string): string => {
  const cleanPhone = phone.replace(/^\+92/, '').replace(/^92/, '').replace(/\s/g, '')
  return `+92${cleanPhone}`
}

// Helper function to validate Pakistani phone numbers
export const validatePakistaniPhone = (phone: string): boolean => {
  const pakistaniPhoneRegex = /^(\+92|92)?[0-9]{10}$/
  return pakistaniPhoneRegex.test(phone.replace(/\s/g, ''))
}

// Auth helper functions with flexible authentication
export const auth = {
  // Sign up with email (no strict password validation)
  signUpWithEmail: async (email: string, password: string, userData?: any) => {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: userData
      }
    })
    
    if (error) throw new Error(handleSupabaseError(error))
    return data
  },

  // Sign up with phone number
  signUpWithPhone: async (phone: string, password: string, userData?: any) => {
    const formattedPhone = formatPakistaniPhone(phone)
    
    const { data, error } = await supabase.auth.signUp({
      phone: formattedPhone,
      password,
      options: {
        data: userData
      }
    })
    
    if (error) throw new Error(handleSupabaseError(error))
    return data
  },

  // Sign in with email
  signInWithEmail: async (email: string, password: string) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    })
    
    if (error) throw new Error(handleSupabaseError(error))
    return data
  },

  // Sign in with phone number
  signInWithPhone: async (phone: string, password: string) => {
    const formattedPhone = formatPakistaniPhone(phone)
    
    const { data, error } = await supabase.auth.signInWithPassword({
      phone: formattedPhone,
      password
    })
    
    if (error) throw new Error(handleSupabaseError(error))
    return data
  },

  // Sign in with OTP (for phone verification)
  signInWithOTP: async (phone: string) => {
    const formattedPhone = formatPakistaniPhone(phone)
    
    const { data, error } = await supabase.auth.signInWithOtp({
      phone: formattedPhone
    })
    
    if (error) throw new Error(handleSupabaseError(error))
    return data
  },

  // Verify OTP
  verifyOTP: async (phone: string, token: string) => {
    const formattedPhone = formatPakistaniPhone(phone)
    
    const { data, error } = await supabase.auth.verifyOtp({
      phone: formattedPhone,
      token,
      type: 'sms'
    })
    
    if (error) throw new Error(handleSupabaseError(error))
    return data
  },

  // Sign out
  signOut: async () => {
    const { error } = await supabase.auth.signOut()
    if (error) throw new Error(handleSupabaseError(error))
  },

  // Get current user
  getCurrentUser: async () => {
    const { data: { user }, error } = await supabase.auth.getUser()
    if (error) throw new Error(handleSupabaseError(error))
    return user
  },

  // Get current session
  getCurrentSession: async () => {
    const { data: { session }, error } = await supabase.auth.getSession()
    if (error) throw new Error(handleSupabaseError(error))
    return session
  },

  // Listen to auth state changes
  onAuthStateChange: (callback: (event: string, session: any) => void) => {
    return supabase.auth.onAuthStateChange(callback)
  },

  // Reset password
  resetPassword: async (email: string) => {
    const { data, error } = await supabase.auth.resetPasswordForEmail(email)
    if (error) throw new Error(handleSupabaseError(error))
    return data
  },

  // Update password
  updatePassword: async (password: string) => {
    const { data, error } = await supabase.auth.updateUser({
      password
    })
    if (error) throw new Error(handleSupabaseError(error))
    return data
  }
}